networks:
  app-tier:
    driver: bridge
  

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 60
    networks:
      - app-tier
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    networks:
      - app-tier
    environment:
      - KAFKA_CLUSTERS_0_NAME=kraft-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy

  # borunte_modbus_01:
  #   build: ./modbus_bridge
  #   container_name: borunte_modbus_01
  #   network_mode: "host"
  #   #restart: always
  #   environment:
  #     - MODE=modbus_to_kafka
  #     - PROCESS_ID=borunte_bridge_to_kafka_01
  #     - KAFKA_IP=${KAFKA_IP}
  #     - KAFKA_PORT=${KAFKA_PORT}
  #     - BORUNTE_IP=${BORUNTE_01_IP}        
  #     - TARGET_ID=${BORUNTE_01_TARGET_ID}
  #     - KAFKA_TOPIC_COMMANDS=${KAFKA_TOPIC_COMMANDS}
  #     - KAFKA_TOPIC_STATUS=${KAFKA_TOPIC_STATUS}
  #     - KAFKA_TOPIC_RESPONSES=${KAFKA_TOPIC_RESPONSES}
  #     - KAFKA_GROUP_ID=modbus_bridge_group
  #     - KAFKA_RETRY=20
  #   volumes:
  #     - ./modbus_bridge/config:/app/config
  #   depends_on:
  #     kafka:
  #       condition: service_healthy

  opc-to-kafka:
    build: ./opc_gateway
    container_name: opc_to_kafka
    network_mode: "host"
    #restart: always
    environment:
      - MODE=opc_to_kafka
      - OPC_ENDPOINT=${OPC_ENDPOINT}
      - KAFKA_BROKER=127.0.0.1:9092
      - KAFKA_TOPIC_COMMANDS=${KAFKA_TOPIC_COMMANDS}
      - KAFKA_TOPIC_STATUS=${KAFKA_TOPIC_STATUS}
      - KAFKA_GROUP_ID=${OPC_KAFKA_GROUP_ID}
    volumes:
      - ./opc_gateway/config:/app/config
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # influxdb:
  #   image: influxdb:2.7
  #   container_name: influxdb
  #   ports:
  #     - "8086:8086"
  #   environment:
  #     - DOCKER_INFLUXDB_INIT_MODE=setup
  #     - DOCKER_INFLUXDB_INIT_USERNAME=admin
  #     - DOCKER_INFLUXDB_INIT_PASSWORD=adminpass
  #     - DOCKER_INFLUXDB_INIT_ORG=robotica
  #     - DOCKER_INFLUXDB_INIT_BUCKET=robot_datos
  #     - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=token123
  #   volumes:
  #     - influxdb_data:/var/lib/influxdb2

  # backend:
  #   build: ./web
  #   volumes:
  #     - ./web:/app
  #   ports:
  #     - "5000:5000"
  #   env_file:
  #     - ./web/.env
  #   depends_on:
  #     - influxdb
  #   command: flask run --host=0.0.0.0 --port=5000 --debug

volumes:
  redis_data:
  #influxdb_data:
